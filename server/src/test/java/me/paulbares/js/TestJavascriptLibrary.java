package me.paulbares.js;

import me.paulbares.jackson.JacksonUtil;
import me.paulbares.query.*;
import me.paulbares.query.dto.*;
import org.apache.commons.io.FileUtils;
import org.assertj.core.api.Assertions;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.Map;

import static me.paulbares.query.QueryBuilder.*;

public class TestJavascriptLibrary {

  @Test
  void testReadJson() throws IOException {
    var table = new TableDto("myTable");
    var refTable = new TableDto("refTable");
    table.innerJoin(refTable, "fromField", "toField");
    table.join(new TableDto("a"), "left", new JoinMappingDto("a", "a_id", "myTable", "id"));

    QueryDto q = new QueryDto()
            .table(table)
            .withColumn("a")
            .withColumn("b");

    var price = new AggregatedMeasure("price.sum", "price", "sum");
    q.withMeasure(price);
    var priceFood = new AggregatedMeasure("alias", "price", "sum", "category", eq("food"));
    q.withMeasure(priceFood);
    var plus = new BinaryOperationMeasure("plusMeasure", BinaryOperator.PLUS, price, priceFood);
    q.withMeasure(plus);
    var expression = new ExpressionMeasure("myExpression", "sum(price*quantity)");
    q.withMeasure(expression);
    q.withMeasure(CountMeasure.INSTANCE);
    q.withMeasure(integer(123));
    q.withMeasure(decimal(1.23));

    q.withMeasure(new ComparisonMeasureReferencePosition("comp bucket",
            ComparisonMethod.ABSOLUTE_DIFFERENCE,
            price,
            ColumnSetKey.BUCKET,
            Map.of("scenario", "s-1", "group", "g")));

    q.withMeasure(new ComparisonMeasureReferencePosition("growth",
            ComparisonMethod.DIVIDE,
            price,
            ColumnSetKey.PERIOD,
            Map.of("Annee", "y-1", "Mois", "m")));

    q.withMeasure(new ParentComparisonMeasure("parent",
            ComparisonMethod.DIVIDE,
            price,
            List.of("Mois", "Annee")));

    var queryCondition = or(and(eq("a"), eq("b")), lt(5));
    q.withCondition("f1", queryCondition);
    q.withCondition("f2", gt(659));
    q.withCondition("f3", in(0, 1, 2));
    q.withCondition("f4", isNull());
    q.withCondition("f5", isNotNull());

    q.orderBy("a", OrderKeywordDto.ASC);
    q.orderBy("b", List.of("1", "l", "p"));

    BucketColumnSetDto columnSet = new BucketColumnSetDto("group", "scenario")
            .withNewBucket("a", List.of("a1", "a2"))
            .withNewBucket("b", List.of("b1", "b2"));
    q.withColumnSet(ColumnSetKey.BUCKET, columnSet);
    q.withColumnSet(ColumnSetKey.PERIOD, new PeriodColumnSetDto(new Period.Month("mois", "annee")));

    QueryDto subQuery = new QueryDto()
            .table(table)
            .withColumn("aa")
            .withMeasure(sum("sum_aa", "f"));
    q.table(subQuery);

    String name = "query.json"; // The content of this file is generated by the js code.
    File file = new File(getClass().getClassLoader().getResource(name).getFile());
    QueryDto qjs = JacksonUtil.deserialize(FileUtils.readFileToString(file, "UTF-8"), QueryDto.class);
    Assertions.assertThat(q.columnSets).isEqualTo(qjs.columnSets);
    Assertions.assertThat(q.columns).isEqualTo(qjs.columns);
    Assertions.assertThat(q.context).isEqualTo(qjs.context);
    Assertions.assertThat(q.orders).isEqualTo(qjs.orders);
    Assertions.assertThat(q.measures).isEqualTo(qjs.measures);
    Assertions.assertThat(q.conditions).isEqualTo(qjs.conditions);
    Assertions.assertThat(q.table).isEqualTo(qjs.table);
    Assertions.assertThat(q.subQuery).isEqualTo(qjs.subQuery);
    Assertions.assertThat(q).isEqualTo(qjs);
  }
}
