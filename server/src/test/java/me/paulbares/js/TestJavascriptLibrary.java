package me.paulbares.js;

import me.paulbares.jackson.JacksonUtil;
import me.paulbares.query.AggregatedMeasure;
import me.paulbares.query.BinaryOperationMeasure;
import me.paulbares.query.BinaryOperator;
import me.paulbares.query.ExpressionMeasure;
import me.paulbares.query.dto.OrderKeywordDto;
import me.paulbares.query.dto.QueryDto;
import me.paulbares.query.dto.TableDto;
import org.apache.commons.io.FileUtils;
import org.assertj.core.api.Assertions;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.io.IOException;
import java.util.List;

import static me.paulbares.query.QueryBuilder.*;

public class TestJavascriptLibrary {

  @Test
  void testReadJson() throws IOException {
    var table = new TableDto("myTable");
    var refTable = new TableDto("refTable");
    table.innerJoin(refTable, "fromField", "toField");

    QueryDto q = new QueryDto()
            .table(table)
            .withColumn("a")
            .withColumn("b");

    var price = new AggregatedMeasure("price.sum", "price", "sum");
    q.withMeasure(price);
    var priceFood = new AggregatedMeasure("alias", "price", "sum", "category", eq("food"));
    q.withMeasure(priceFood);
    var plus = new BinaryOperationMeasure("plusMeasure", BinaryOperator.PLUS, price, priceFood);
    q.withMeasure(plus);
    var expression = new ExpressionMeasure("myExpression", "sum(price*quantity)");
    q.withMeasure(expression);

    var queryCondition = or(and(eq("a"), eq("b")), lt(5));
    q.withCondition("f1", queryCondition);
    q.withCondition("f2", gt(659));
    q.withCondition("f3", in(0, 1, 2));

    q.orderBy("a", OrderKeywordDto.ASC);
    q.orderBy("b", List.of("1", "l", "p"));

    String name = "query.json"; // The content of this file is generated by the js code.
    File file = new File(getClass().getClassLoader().getResource(name).getFile());
    QueryDto qjs = JacksonUtil.deserialize(FileUtils.readFileToString(file, "UTF-8"), QueryDto.class);
    Assertions.assertThat(q).isEqualTo(qjs);
  }
}
